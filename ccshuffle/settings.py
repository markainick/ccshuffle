"""
Django settings for ccshuffle project.

Generated by 'django-admin startproject' using Django 1.8.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import json
from django.utils.translation import ugettext_lazy as _

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Configuration file for the deployment. The default location is the file with the name 'ccshuffle.conf' in the
# base directory. If the environment variable 'CCSHUFFLE_CONF' is set, the value of the variable as path will be used.

CONF_FILE = os.environ['CCSHUFFLE_CONF'] if 'CCSHUFFLE_CONF' in os.environ else '%s/ccshuffle.conf' % BASE_DIR

# Development settings
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

try:
    with open(CONF_FILE, 'r', encoding='utf-8') as fp:
        conf = json.load(fp)
        # True for development, False for production (the ALLOWED_HOSTs must be set then).
        DEBUG = conf['DEBUG'] if 'DEBUG' in conf else False
        if not DEBUG:
            # The hosts, which are allowed to use the service.
            ALLOWED_HOSTS = conf['ALLOWED_HOSTS']
            # The csrf cookie enforces to be transported over https.
            # https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-CSRF_COOKIE_SECURE
            CSRF_COOKIE_SECURE = conf['CSRF_COOKIE_SECURE'] if 'CSRF_COOKIE_SECURE' in conf else True
            # The session cookie enforces to be transported over https.
            # https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-SESSION_COOKIE_SECURE
            SESSION_COOKIE_SECURE = conf['SESSION_COOKIE_SECURE'] if 'SESSION_COOKIE_SECURE' in conf else True
        # The secret key must be a large random value and it must be kept secret.
        if 'SECRET_KEY' not in conf and not conf['SECRET_KEY']:
            raise ValueError('The secret key must be set in the configuration file.')
        elif conf['SECRET_KEY'] == "&*lu()8=bw%embg-@&n9h=q5w&s=&1=9fn@1xgejo3m1-d+x76":
            print('For production set your own secret key in the configuration file. It must be kept secret !')
            if not DEBUG:
                raise ValueError('The secret key must be set in the configuration file. It must be kept secret !')
        SECRET_KEY = conf['SECRET_KEY']
        # Database
        # https://docs.djangoproject.com/en/1.8/ref/settings/#databases
        if 'DATABASES' not in conf and not conf['DATABASES']:
            raise ValueError('The database configuration must be set in the configuration file.')
        DATABASES = conf['DATABASES']
        # Settings for the reCaptcha
        # https://github.com/praekelt/django-recaptcha
        if 'RECAPTCHA_PUBLIC_KEY' not in conf and not conf['RECAPTCHA_PUBLIC_KEY']:
            raise ValueError('The public key for the reCaptcha validation must be set in the configuration file.')
        RECAPTCHA_PUBLIC_KEY = conf['RECAPTCHA_PUBLIC_KEY']
        if 'RECAPTCHA_PRIVATE_KEY' not in conf and not conf['RECAPTCHA_PRIVATE_KEY']:
            raise ValueError('The private key for the reCaptcha validation must be set in the configuration file.')
        elif conf['RECAPTCHA_PRIVATE_KEY'] == "6LdKag0TAAAAALDTyLLkQGx1mw__1T89de_uIWac":
            print('For production register your own reCaptcha account and keep the private key secret.')
            if not DEBUG:
                raise ValueError('Register your own reCaptcha account and keep the private key secret.')
        RECAPTCHA_PRIVATE_KEY = conf['RECAPTCHA_PRIVATE_KEY']
        NOCAPTCHA = True
        RECAPTCHA_USE_SSL = True
        # Jamendo Authentication
        # https://developer.jamendo.com/v3.0
        if 'JAMENDO_AUTH' in conf:
            JAMENDO_AUTH = conf['JAMENDO_AUTH']
            os.environ['JAMENDO_AUTH'] = JAMENDO_AUTH
        # Logging settings, which are optional.
        # https://docs.djangoproject.com/en/1.8/topics/logging/
        if 'LOGGING' in conf:
            LOGGING = conf['LOGGING']
        # Functional testing mode.
        # !! Only use this setting for testing purposes and not in production !!
        if 'FUNCTIONAL_TESTING' in conf:
            if not DEBUG:
                raise ValueError('The functional testing mode must not be used for production.')
            FUNCTIONAL_TESTING = conf['FUNCTIONAL_TESTING']
            os.environ['FUNCTIONAL_TESTING'] = str(FUNCTIONAL_TESTING)
except Exception as e:
    raise SystemError('The configuration file (%s) can\'t be loaded.' % CONF_FILE) from e


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'captcha',
    'shuffle',
    'crawler',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'ccshuffle.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ccshuffle.wsgi.application'


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = (
    'locale',
)

# Languages, which are supported by the service.
LANGUAGES = (
    ('de', _('German')),
    ('en', _('English')),
)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (BASE_DIR + "/static",)
